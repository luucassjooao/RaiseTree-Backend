{
  "openapi": "3.0.0",
  "info": {
    "title": "Raise Tree",
    "description": "Raise Tree é a API de um gerenciador de atividades escolares",
    "contact": {
      "name": "João Lucas",
      "email": "mainexcalibur@protonmail.com"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Register",
      "description": "Responsável pelos registros de usuários/organização"
    },
    {
      "name": "StaticUser",
      "description": "Responsável por adicionar novos usuários na organização - Estudantes/Professores"
    },
    {
      "name": "Auth",
      "description": "Responsável pela autenticação da aplicação"
    },
    {
      "name": "User",
      "description": "Responsável pelas manipulações/visualizção dos dados do User"
    },
    {
      "name": "Subject",
      "description": "Responsável pelas manipulações/visualizção dos dados das Máterias"
    },
    {
      "name": "Activity",
      "description": "Responsável por criar e mostrar infos sobre atividades"
    }
  ],
  "paths": {
    "/sendEmailForRegister": {
      "post": {
        "tags": ["Register"],
        "summary": "Manda um email para o usuário",
        "description": "Se for um admin criando uma organização, manda o email com dele e informações sobre a organização, se for estudante ou professor, manda algumas informações. Ambos os casos, mandamos um token JWT com as informações",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Register"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verifique seu email para ativar sua conta!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Register_Response_400"
                }
              }
            }
          },
          "404": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Register_Response_404"
                }
              }
            }
          }
        }
      }
    },
    "/activeUserWithCode": {
      "post": {
        "tags": ["Register"],
        "summary": "Registrando o usuário/organização",
        "description": "Quando o usuário clica no botão/link do email que mandamos pra ele, ele é redirecionado para uma página no front, onde o token é enviado na url, automaticamente esse token é mandado para o back, e se tiver tudo certo, o usuário é registrado. No caso do admin, a organização também é criada",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activeToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Você agora está registrado(a)!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Register_Response_ActiveWithToken_400"
                }
              }
            }
          }
        }
      }
    },
    "/activeTeacher": {
      "post": {
        "tags": ["Register"],
        "summary": "Uma rota especial para o professor se cadastrar",
        "description": "Quando o admin estiver adicionando os usuários que podem fazer parte da sua organização, na parte dos professores, ele pode colocar o email do professor em questão, no email desse professor, quando ele clicar no botão/link, ele vai ser redirecionado para uma página que ele vai preencher uma senha, e escolher qual sua matéria, sem precisar ele fazer o registro como foi descrito na rota `/sendEmailForRegister`, e quando ele tiver no front e fazer o submit, vai ser enviado para o back, a senha, a matéria e o token, que contém um objeto com suas infos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activeToken": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "subjectId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Professor registrado!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Register_Response_ActiveTeacherByMail_400"
                }
              }
            }
          }
        }
      }
    },
    "/createOneStaticUser": {
      "post": {
        "tags": ["StaticUser"],
        "summary": "Admin cria UM novo usuário",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/StaticUser"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "${Nome do Usuário aqui} adicionado com sucesso!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/StaticUser_Response_400"
                }
              }
            }
          }
        }
      }
    },
    "/createManyPeoples": {
      "post": {
        "tags": ["StaticUser"],
        "summary": "Admin cria varios novos usuários manualmente pelo front-end",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "peoples": {
                    "items": {
                      "$ref": "#/definitions/StaticUser_ManyPeoples"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "organizationId",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Pessoas Criadas!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/StaticUser_Response_ManyPeoples_400"
                }
              }
            }
          },
          "404": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Ouve um erro! Tente novamente!": {
                      "type": "string",
                      "example": "Antes de fazer a transaction no BD, busca a organização, e se por algum motivo der errado, essa mensagem aparece"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/createPeoplesBySheet/:sheetId/:typeOfPeoples": {
      "post": {
        "tags": ["StaticUser"],
        "summary": "Admin cria varios novos usuários por uma planilha, pelo Google Sheets",
        "parameters": [
          {
            "name": "organizationId",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "classrooms",
            "in": "header",
            "required": true,
            "type": "array"
          },
          {
            "name": "sheetId",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "typeOfPeoples",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["student", "teacher"]
          }
        ],
        "responses": {
          "201": {
            "description": "Pessoas Criadas!"
          },
          "400": {
            "description": "O erro pode ser por causa de umas dessas causas",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/StaticUser_Response_ManyPeoples_BySheets_400"
                }
              }
            }
          }
        }
      }
    },
    "/findallpeoplesstaticUser": {
      "get": {
        "tags": ["StaticUser"],
        "summary": "Admin consegue visualizar pessoas que faltão entrar na sua organização",
        "parameters": [
          {
            "name": "organizationId",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "items": {
                        "$ref": "#/definitions/StaticUser_Reponse_FindPeoples_200"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Não existe pessoas para fazerem registro na sua organização!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Autenticação na aplicação",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "required": true,
                    "example": "*******"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "findUser": {
                      "$ref": "#/definitions/Auth_Login"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Email ou senha está incorreta!"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": ["User"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Pega as informações do usuário",
        "parameters": [
          {
            "name": "user.id",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "findUser": {
                      "$ref": "#/definitions/Auth_Login"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Usuario não encontrado!"
          }
        }
      }
    },
    "/subject": {
      "post": {
        "tags": ["Subject"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Cria uma máteria",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "${NOME DA MÁTERIA} foi registrada!"
          },
          "400": {
            "description": "Está materia já está registrada!"
          }
        }
      },
      "get": {
        "tags": ["Subject"],
        "summary": "Busca todas as máterias",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "items": {
                        "$ref": "#/definitions/Subject"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ouve um error! Tente novamente!"
          }
        }
      }
    },
    "/createActivity": {
      "post": {
        "tags": ["Activity"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Cria uma atividade do zero",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Activity_Create"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "teacherId",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "subjectId",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Atividade Criada"
          },
          "400": {
            "description": "Se estiver faltando algum campo, o professor recebe esse erro. {Está faltando algum campo!}"
          }
        }
      }
    },
    "/createActivityWithDraft/:idDraft": {
      "post": {
        "tags": ["Activity"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Cria uma atividade com informações de um rascunho",
        "description": "Depois de criar uma atividade, o rascunho é deletado",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Activity_Create"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "idDraft",
            "in": "query",
            "description": "ID de algum rascunho",
            "required": true,
            "type": "string"
          },
          {
            "name": "teacherId",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "subjectId",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Atividade Criada"
          },
          "400": {
            "description": "Se estiver faltando algum campo, o professor recebe esse erro. {Está faltando algum campo!}"
          }
        }
      }
    },
    "/getUniqueById/:id": {
      "get": {
        "tags": ["Activity"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Busca as informações de uma única atividade",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID de alguma atividade",
            "required": true,
            "type": "string"
          },
          {
            "name": "classroomUser",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Se o usuário for um estudante, o tipo vai ser uma string, se for admin/professor, vai ser um array"
          },
          {
            "name": "typeUser",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": ["admin", "student", "teacher"]
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Activity_Response_With_Answers"
                }
              }
            }
          },
          "401": {
            "description": "Se o usuário que estiver querendo ver a atividade for estudante, e a sala do estudante não tiver na lista de salas que o professor mandou a atividade, ele recebe esse erro. {Você não pode visualizar está atividade!}"
          }
        }
      }
    },
    "/getHomeActivities": {
      "get": {
        "tags": ["Activity"],
        "security": [{ "bearerAuth": [] }],
        "summary": "Atividades na home",
        "description": "Para o estudante e o administrador, vai aparecer as atividades com cada matéria na sua propria coluna no front, mas para os estudantes, apenas as atividades que ainda estão válidas para serem respondidas. Para o professor, vai aparecer apenas suas atividades.",
        "parameters": [
          {
            "name": "classroomUser",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Se o usuário for um estudante, o tipo vai ser uma string, se for admin/professor, vai ser um array"
          },
          {
            "name": "typeUser",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": ["admin", "student", "teacher"]
          },
          {
            "name": "teacherId",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OBSERVAÇÃO: O OBJECTO ABAIXO, VEM EM UM ARRAY, COM VÁRIOS OBJETOS PARECIDOS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response": {
                      "items": {
                        "$ref": "#/definitions/Activity_Home"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Auth_Login": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "organizationId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["student", "teacher", "admin"]
        },
        "type_model_student": {
          "type": "object"
        },
        "type_model_teacher": {
          "type": "object"
        }
      }
    },
    "Activity_Create": {
      "type": "object",
      "required": [
        "title",
        "description",
        "classrooms",
        "activity",
        "dateExpiration",
        "type"
      ],
      "properties": {
        "title": {
          "type": "string",
          "example": "Como fazer equação"
        },
        "description": {
          "type": "string",
          "example": "Essa atividade aborda sobre os tipos de equações..."
        },
        "classroom": {
          "type": "array",
          "example": ["1-a","1-b"]
        },
        "activity": {
          "type": "string",
          "example": "{Aqui será a atividade}"
        },
        "dateExpiration": {
          "type": "string",
          "format": "date",
          "example": "2023-03-24T23:13:00.000Z"
        },
        "type": {
          "type": "string",
          "enum": ["Atividade", "Tarefa", "Trabalho"]
        },
        "previous_points": {
          "type": "number"
        }
      }
    },
    "Activity_Response_With_Answers": {
      "allOf": [
        {
          "$ref": "#/definitions/Activity_Create"
        },
        {
          "type": "object",
          "properties": {
            "Teacher": {
              "$ref": "#/definitions/Teacher"
            }
          }
        },
        {
          "type": "array",
          "properties": {
            "answered_activities": {
              "items": {
                "$ref": "#/definitions/AnswerActivity"
              }
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "subject": {
              "$ref": "#/definitions/Subject"
            }
          }
        }
      ]
    },
    "Activity_Response_Without_Answers": {
      "allOf": [
        {
          "$ref": "#/definitions/Activity_Create"
        },
        {
          "type": "object",
          "properties": {
            "Teacher": {
              "$ref": "#/definitions/Teacher"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "subject": {
              "$ref": "#/definitions/Subject"
            }
          }
        }
      ]
    },
    "Activity_Home_Student": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "nameSubject": {
              "type": "string",
              "example": "Historia"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "activitys": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Activity_Response_Without_Answers"
              }
            }
          }
        }
      ]
    },
    "Activity_Home": {
      "anyOf": [
        {
          "$ref": "#/definitions/Activity_Home_Student"
        },
        {
          "$ref": "#/definitions/Activity_Response_Without_Answers"
        }
      ]
    },
    "AnswerActivity": {
      "type": "object",
      "required": [
        "answer"
      ],
      "properties": {
        "answer": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "note_of_teacher": {
          "type": "string"
        },
        "Student": {
          "$ref": "#/definitions/Student"
        }
      }
    },
    "Teacher": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "classroom": {
          "type": "array",
          "example": ["1-a","1-b"]
        },
        "subject": {
          "$ref": "#/definitions/Subject"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Student": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "classroom": {
          "type": "string"
        },
        "points": {
          "type": "array",
          "example": [{"points": 10, "subjectName": "Portugues"}]
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Subject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "StaticUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "classroom": {
          "type": "array",
          "example": []
        },
        "code": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["student", "teacher"]
        }
      }
    },
    "StaticUser_ManyPeoples": {
      "allOf": [
        {
          "$ref": "#/definitions/StaticUser"
        },
        {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "O email vai vim preenchido apenas se o tipo do usuário for teacher"
            }
          }
        }
      ]
    },
    "StaticUser_Reponse_FindPeoples_200": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["student", "teacher"]
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "peoples": {
              "items": {
                "$ref": "#/definitions/StaticUser"
              }
            }
          }
        }
      ]
    },
    "StaticUser_Response_400": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Este CPF já está em uso!": {
              "type": "string",
              "example": "Essa mensagem vai ser mostrada quando o admin colocar um CPF para o estudante que já está cadastrado na tabela StaticUser"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Estudante já registrado!": {
              "type": "string",
              "example": "Essa mensagem vai ser mostrada quando o admin tenta criar um estudante que já está registrado na table InfosUser"
            }
          }
        }
      ]
    },
    "StaticUser_Response_ManyPeoples_400": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "O CPF: ${CPF DO ESTUDANTE} já está cadastrado em uma pessoa fora da sua organização, verifique com o estudante: ${NOME DO ESTUDANTE}!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando um CPF já estiver cadastrado em uma organização fora da organização do admin que estiver fazendo o cadastro"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O estudante ${NOME DO ESTUDANTE}, está com um CPF já cadastrado, em uma pessoa que já está dentro da sua organização!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando um CPF já estiver cadastrado na propría organização do admin, e ele estiver tentando cadastrar um novo usuário com este CPF"
            }
          }
        }
      ]
    },
    "StaticUser_Response_ManyPeoples_BySheets_400": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Na sua planilha não tem o cabeçalho CPF!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando na planilha não tiver o cabeçalho CPF - Apenas quando o typeUser for Estudante"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Na sua planilha não tem o cabeçalho Nome!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando na planilha não tiver o cabeçalho Nome"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Na sua planilha não tem o cabeçalho Sala!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando na planilha não tiver o cabeçalho Sala"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Na sua planilha não tem o cabeçalho Email!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando na planilha não tiver o cabeçalho Email - Apenas quando o typeUser for Professor"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O CPF: ${CPF DO ESTUDANTE} já está cadastrado, verifique com o estudante: ${NOMDE DO ESTUDANTE}!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando tiver um CPF já cadastrado estiver na planilha"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O estudante ${NOME DO ESTUDANTE}, está com um CPF já cadastrado, em uma pessoa que já está dentro da sua organização!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando um CPF já estiver cadastrado na propría organização do admin, e ele estiver tentando cadastrar um novo usuário com este CPF"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O CPF ${CPF DO ESTUDANTE}, está duplicado": {
              "type": "string",
              "example": "Essa mensagem vai aparecer quando um CPF estiver duplicado na planilha"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O ${typeUser === 'student' ? 'estudante' : 'professor'}, ${NOME DO USUÁRIO}, está com uma sala que não existe na sua organização!": {
              "type": "string",
              "example": "Essa mensagem vai aparecer na linha da planillha não tiver uma sala que existe na organização"
            }
          }
        }
      ]
    },
    "Register": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "example": "Escola Muito Seria Estadual",
          "description": "Nome da organização. Essa info vai ser mandada apenas se for uma admin criando uma organização"
        },
        "organizationClassroom": {
          "type": "array",
          "example": ["1-a","1-b"],
          "description": "Salas/turmas que a organização tem. Essa info vai ser mandada apenas se for uma admin criando uma organização"
        },
        "name": {
          "type": "string",
          "example": "Joao",
          "description": "Aqui vai ser o nome do aluno/professor ou do admin que estiver criando uma organização"
        },
        "email": {
          "type": "string",
          "example": "joao@gmail.com",
          "description": "Aqui vai ser o email do aluno/professor ou do admin que estiver criando a organização"
        },
        "password": {
          "type": "string",
          "description": "Aqui vai ser a senha do aluno/professor ou do admin que estiver criando uma organização."
        },
        "type": {
          "type": "string",
          "enum": ["admin", "teacher", "student"],
          "description": "O tipo do usuário"
        },
        "subjectId": {
          "type": "string",
          "description": "Se o usuário for professor/admin, essa propriedade vai vim com um id de uma matéria"
        },
        "firstContact": {
          "type": "boolean",
          "description": "Se for um admin criando uma organização, aqui vai vim true"
        },
        "code": {
          "type": "string",
          "description": "Se o usuário for um estudante/professor, ele vai digitar o códdigo que a organização deu para eles. No caso do estudante, provávelmente será seu CPF, para o professor um UUID. No caso do admin, um UUID é criado automaticamente antes dele ser registrado no banco"
        }
      }
    },
    "Register_Response_400": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Este email já está em uso!": {
              "type": "string",
              "example": "Essa mensagem vai ser mostrada quando o usuário ele tentar se registrar com um email já existente no banco de dados"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Já existe uma organização com este nome!": {
              "type": "string",
              "example": "Quando um admin estiver criando sua organização, e já tiver um organização com o mesmo nome, aparecerá está mensagem"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "O formato do seu código é invalido!": {
              "type": "string",
              "example": "Quando um professor inserir um código que não tiver um formato do UUID, vai aparecer este error"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Usuario já está cadastrado!": {
              "type": "string",
              "example": "Quando um usuário for se cadastrar, mas já existe usuários cadastrados com aquelas infos"
            }
          }
        }
      ]
    },
    "Register_Response_404": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Este codígo não está valido!": {
              "type": "string",
              "example": "Se não encontrar o código no banco, aparece este erro"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Já existe uma organização com este nome!": {
              "type": "string",
              "example": "Quando um admin estiver criando sua organização, e já tiver um organização com o mesmo nome, aparecerá está mensagem"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "Usuario não está pré-cadastrado. Verifique com seu coordenador!": {
              "type": "string",
              "example": "Quando usuário vai fazer seu cadastro, mas ele ainda não foi pré-cadastrado"
            }
          }
        }
      ]
    },
    "Register_Response_ActiveWithToken_400": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "Informações Inválidas. Faça o registro novamente!": {
              "type": "string",
              "example": "Essa mensagem vai ser mostrada quando no token não tiver um objeto com informações do usuário"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "A data do email expirou! Faça o registro novamente!": {
              "type": "string",
              "example": "O JWT tem a duração de 15 minutos, passando esse tempo, o email fica inválido"
            }
          }
        }
      ]
    },
    "Register_Response_ActiveTeacherByMail_400": {
      "allOf": [
        {
          "$ref": "#/definitions/Register_Response_ActiveWithToken_400"
        },
        {
          "type": "object",
          "properties": {
            "Ouve algum error! Verifique com o coordenador!": {
              "type": "string",
              "example": "Junto com as infos que forem mandadas, será mandada um código, se o código não estiver na tabela de StaticUser, vai aparecer este erro"
            }
          }
        }
      ]
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    }
  },
  "securitySchemes": {
    "bearerAuth": {
      "description": "Autenticação da API",
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "JWT"
    }
  }
}
